name: Build, Publish and Deploy to Gamma
on: [workflow_dispatch]

jobs:
  gsoc2-image:
    name: Build backend image
    runs-on: ubuntu-latest
    steps:
      - name: ‚òÅÔ∏è Checkout source
        uses: actions/checkout@v3
      - name: üì¶ Install dependencies to test all dependencies
        run: npm ci --only-production
        working-directory: backend
      # - name: üß™ Run tests
      #   run: npm run test:ci
      #   working-directory: backend
      - name: Save commit hashes for tag
        id: commit
        uses: pr-mpt/actions-commit-hash@v2
      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: üêã Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Depot CLI
        uses: depot/setup-action@v1
      - name: üì¶ Build backend and export to Docker
        uses: depot/build-push-action@v1
        with:
          project: 64mmf0n610
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          load: true
          context: .
          file: Dockerfile.standalone-gsoc2
          tags: gsoc2/gsoc2:test
      - name: ‚èª Spawn backend container and dependencies
        run: |
          docker compose -f .github/resources/docker-compose.be-test.yml up --wait --quiet-pull
      - name: üß™ Test backend image
        run: |
          ./.github/resources/healthcheck.sh gsoc2-backend-test
      - name: ‚èª Shut down backend container and dependencies
        run: |
          docker compose -f .github/resources/docker-compose.be-test.yml down
      - name: üèóÔ∏è Build backend and push
        uses: depot/build-push-action@v1
        with:
          project: 64mmf0n610
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          push: true
          context: .
          file: Dockerfile.standalone-gsoc2
          tags: |
            gsoc2/staging_gsoc2:${{ steps.commit.outputs.short }}
            gsoc2/staging_gsoc2:latest
          platforms: linux/amd64,linux/arm64
          build-args: |
            POSTHOG_API_KEY=${{ secrets.PUBLIC_POSTHOG_API_KEY }}
            GSOC2_PLATFORM_VERSION=${{ steps.extract_version.outputs.version }}

  gamma-deployment:
    name: Deploy to gamma
    runs-on: ubuntu-latest
    needs: [gsoc2-image]
    steps:
      - name: ‚òÅÔ∏è Checkout source
        uses: actions/checkout@v3
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      - name: Install gsoc2 helm chart
        run: |
          helm repo add gsoc2-helm-charts 'https://dl.cloudsmith.io/public/gsoc2/helm-charts/helm/charts/'
          helm repo update
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-1-25-4-do-0-nyc1-1670645170179
      - name: switch to gamma namespace
        run: kubectl config set-context --current --namespace=gamma
      - name: test kubectl
        run: kubectl get ingress
      - name: Download helm values to file and upgrade gamma deploy
        run: |
          wget https://raw.githubusercontent.com/Gsoc2/gsoc2/main/.github/values.yaml
          helm upgrade gsoc2 gsoc2-helm-charts/gsoc2  --values values.yaml --wait --install
          if [[ $(helm status gsoc2) == *"FAILED"* ]]; then
            echo "Helm upgrade failed"
            exit 1
          else
            echo "Helm upgrade was successful"
          fi
